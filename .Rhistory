library(devtools)
library(dessert)
strsplit1()
load_all()
library(devtools)
load_all()
exists("strsplit1", where = globalenv(), inherits = FALSE)
?load_all()
check()
check()
check()
check
check()
library(devtools)
check()
check()
library(dessert)
document()
check()
library(dessert)
strsplit1("alfa,bravo,charlie,delta", split = ",")
use_testthat()
test()
use_package("stringr")
document()
document()
load_all()
build()
library(dessert)
?str_splÂ§
?str_split_one
check()
library(dessert)
check()
library(dessert)
library(dessert)
check()
check()
check()
devtools::dev_sitrep()
available::available("doofus")
install.packages("available")
available::available("dessert")
usethis::use_citation()
check()
#| include = FALSE
input <- list(
object = lm(Sepal.Length ~ ., data = iris),
params = list(
seed = 1,
a = "a",
b = NULL,
c = 123
)
)
plot(input$object, 1)
check()
check()
plot(input$object, 1)
#| include = FALSE
input <- list(
object = lm(Sepal.Length ~ ., data = iris),
params = list(
seed = 1,
a = "a",
b = NULL,
c = 123
)
)
#| include = FALSE
input <- list(
object = lm(Sepal.Length ~ ., data = iris),
params = list(
seed = 1,
a = "a",
b = NULL,
c = 123
)
)
rmarkdown::yaml_front_matter("/Users/e.p.swens/Desktop/dessert/inst/spoon/linearity.qmd")
?set.seed
?lm
use_package("fs")
library(devtools)
use_package("fs")
library(dessert)
get_yamls()
?str_split_one
library(dessert)
document()
check()
library(dessert)
get_yamls()
?get_yamls()
document()
document()
document()
library(dessert)
check()
get_yamls
get_yamls()
x <- get_yamls()
x
check()
library(dessert)
check()
library(dessert)
get_yamls()
?path()
?list.files
?dir
?files_path()
?files()
?files()
??files()
library(dessert)
quarto::quarto_inspect("/Users/e.p.swens/Desktop/dessert/R/get_yamls.R")
quarto::quarto_inspect("/Users/e.p.swens/Desktop/dessert/inst/spoon/linearity.qmd")
library(dessert)
get_yamls()
library(dessert)
library(dessert)
get_yamls()
list(a = 1, b = 2)
t <- list(a = 1, b = 2)
t[-"a"]
t[-1]
t[-2]
t[-c("a")]
get_yamls()
t[]
t[-"b"]
t[t$names]
t$names
?names()
names(t)
!names(t) %in% c("a")
t[!names(t) %in% c("a")]
library(dessert)
get_yamls()
get_yamls()
library(dessert)
library(dessert)
get_yamls()
library(dessert)
get_yamls()
yaml <- quarto::quarto_inspect("/Users/e.p.swens/Desktop/dessert/inst/spoon/linearity.qmd")
yaml
yaml$engines
yaml$formats
names(yaml$formats)
?format()
?formats
yaml$formats$html
yaml["formats"]
yaml[["formats"]]
t
t["a"]
t[["a"]]
library(dessert)
get_yamls()
library(dessert)
get_yamls()
names(yaml$formats)
yaml <- quarto::quarto_inspect("/Users/e.p.swens/Desktop/dessert/inst/spoon/linearity_2.qmd")
names(yaml$formats)
yaml <- quarto::quarto_inspect("/Users/e.p.swens/Desktop/dessert/inst/spoon/linearity_2.qmd")
names(yaml$formats)
yaml$resources
yaml$formats[[1]]
yaml$formats[[1]]$metadata
yaml$formats[[1]]$metadata
yaml <- quarto::quarto_inspect("/Users/e.p.swens/Desktop/dessert/inst/spoon/linearity_2.qmd")
names(yaml$formats)
yaml_items <- c("title", "description", "category", "classes", "parameters",
"parameters_description", "authors", "id")
yaml <- yaml$formats[[1]]$metadata
yaml
t
t[c("a", "b")]
yaml <- yaml$formats[[1]]$metadata[yaml_items]
yaml
yaml <- quarto::quarto_inspect("/Users/e.p.swens/Desktop/dessert/inst/spoon/linearity_2.qmd")
names(yaml$formats)
yaml_items <- c("title", "description", "category", "classes", "parameters",
"parameters_description", "authors", "id")
yaml <- yaml$formats[[1]]$metadata[yaml_items]
yaml
yaml
yaml <- quarto::quarto_inspect("/Users/e.p.swens/Desktop/dessert/inst/spoon/linearity_2.qmd")
yaml_formats <- names(yaml$formats)
yaml_items <- c("title", "description", "category", "classes", "parameters",
"parameters_description", "authors", "id")
yaml <- yaml$formats[[1]]$metadata[yaml_items]
yaml$formats <- yaml_formats
yaml
yaml_items <- c("title", "description", "category", "classes", "parameters",
"parameters_description", "authors", "idz")
yaml <- yaml$formats[[1]]$metadata[yaml_items]
yaml <- quarto::quarto_inspect("/Users/e.p.swens/Desktop/dessert/inst/spoon/linearity_2.qmd")
yaml_formats <- names(yaml$formats)
yaml_items <- c("title", "description", "category", "classes", "parameters",
"parameters_description", "authors", "idz")
yaml <- yaml$formats[[1]]$metadata[yaml_items]
yaml$formats <- yaml_formats
yaml
yaml <- quarto::quarto_inspect("/Users/e.p.swens/Desktop/dessert/inst/spoon/linearity_2.qmd")
yaml_formats <- names(yaml$formats)
yaml_items <- c("title", "description", "category", "classes", "parameters",
"parameters_description", "authors", "id")
yaml <- yaml$formats[[1]]$metadata[yaml_items]
yaml$formats <- yaml_formats
yaml
t <- list()
list(a = 1)
u <- list(a = 1)
t <- append(t, u)
t
t <- append(t, u)
t
u <- list(a = 1, b = 3)
append(t, u)
append(t, list(u))
#' Get YAMLS
#'
#' @param spoon A character vector with, at most, one element.
#'
#' @return A tibble.
#' @export
#'
#' @examples
#' get_yamls()
get_yamls <- function(spoon) {
pkg_path <- fs::path_package("dessert")
files_path <- fs::path(pkg_path, "spoon")
files_path <- list.files(files_path, full.names = TRUE)
yamls <- list()
for (file_path in files_path) {
yaml <- quarto::quarto_inspect(file_path)
yaml_formats <- names(yaml$formats)
yaml_items <- c(
"title", "description", "category", "classes", "parameters",
"parameters_description", "authors", "id"
)
yaml <- yaml[["formats"]][[1]][["metadata"]][yaml_items]
yaml$formats <- yaml_formats
yamls <- append(yamls, list(yaml))
}
yamls
}
check()
library(devtools)
use_package("quarto")
"/Users/e.p.swens/Desktop/dessert/inst/spoon/linearity_2.qmd"
dirname("/Users/e.p.swens/Desktop/dessert/inst/spoon/linearity_2.qmd")
basename("/Users/e.p.swens/Desktop/dessert/inst/spoon/linearity_2.qmd")
?basename("/Users/e.p.swens/Desktop/dessert/inst/spoon/linearity_2.qmd")
?fs::path_file()
fs::path_file("/Users/e.p.swens/Desktop/dessert/inst/spoon/linearity_2.qmd")
fs::path_ext_remove("/Users/e.p.swens/Desktop/dessert/inst/spoon/linearity_2.qmd")
fs::path_file(fs::path_ext_remove("/Users/e.p.swens/Desktop/dessert/inst/spoon/linearity_2.qmd"))
fs::path_ext_remove(fs::path_file("/Users/e.p.swens/Desktop/dessert/inst/spoon/linearity_2.qmd"))
fs::path_ext_remove(fs::path_file("/spoon/linearity_2.qmd"))
library(dessert)
get_yamls()
get_yamls()
yamls <- get_yamls()
yamls <- get_yamls()
View(yamls)
yamls <- get_yamls()
yamls <- get_yamls()
yamls <- get_yamls()
library(dessert)
?list
View(yamls)
#' Get YAMLS
#'
#' @param spoon A character vector with, at most, one element.
#'
#' @return A tibble.
#' @export
#'
#' @examples
#' get_yamls()
get_yamls <- function() {
pkg_path <- fs::path_package("dessert")
files_path <- fs::path(pkg_path, "spoon")
files_path <- list.files(files_path, full.names = TRUE)
yamls <- list()
for (file_path in files_path) {
yaml <- quarto::quarto_inspect(file_path)
yaml_formats <- names(yaml$formats)
yaml_items <- c(
"title", "description", "category", "classes", "parameters",
"parameters_description", "authors", "id"
)
yaml <- yaml[["formats"]][[1]][["metadata"]][yaml_items]
yaml$formats <- yaml_formats
yaml$path <- file_path
yaml$name <- fs::path_ext_remove(basename(file_path))
yaml <- list(yaml)
names(yaml) <- yaml$name
yamls <- append(yamls, list(yaml))
}
yamls
}
get_yamls()
yamls <- yaml$name
yamls <- yamls()
yamls <- get_yamls()
View(get_yamls)
View(yamls)
library(dessert)
yamls <- get_yamls()
View(yamls)
library(dessert)
check()
library(testthat)
check()
document()
document()
check()
usethis::use_logo("/Users/e.p.swens/Desktop/dessert.png")
usethis::use_logo("/Users/e.p.swens/Desktop/dessert.png")
use_readme_rmd()
check()
install()
check()
check()
build_readme()
build_readme()
build_readme()
check()
fs::path("pkg_path", "spoon")
fs::path("pkg_path", "spoon", "b")
?fs::path
fs::path("pkg_path", "spoon", "b", ext = "qmd")
check()
check()
library(dessert)
check()
preview_spoon("linearity")
?quarto::quarto_preview
quarto_preview_stop()
quarto::quarto_preview_stop()
preview_spoon("linearity")
quarto::quarto_preview_stop()
library(dessert)
preview_spoon("linearity")
quarto::quarto_preview_stop()
preview_spoon("linearity", quiet = TRUE)
library(dessert)
document()
?preview_spoon
?quarto::quarto_preview()
quarto::quarto_preview("/Users/e.p.swens/Desktop/dessert/inst/spoon/linearity.qmd")
quarto::quarto_preview_stop()
test <- quarto::quarto_preview("/Users/e.p.swens/Desktop/dessert/inst/spoon/linearity.qmd")
document()
document()
?preview_spoon()
check()
quarto::quarto_preview_stop()
check()
check()
