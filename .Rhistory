test <- get_yamls()
test
plot(input, which = 1)
#| include = FALSE
input <- tryCatch(
{
read.csv("data.csv")
},
error = function(e) {
lm(Sepal.Length ~ ., iris)
}
)
plot(input, which = 1)
check()
library(dessert)
preview_spoon("homoscedasticity")
get_yamls()
yamls <- get_yamls()
View(yamls)
library(dessert)
get_yamls()
test <- get_yamls()
View(test)
library(dessert)
test <- get_yamls()
test
View(test)
library(dessert)
test <- get_yamls()
yamls <- get_yamls()
yamls
as_tibble(yamls)
tibble::as_tibble(yamls)
View(yamls)
?keep()
library(dessert)
check()
usethis::use_data(internal = TRUE)
pkg_path <- fs::path_package("dessert")
pkg_path
files_path <- fs::path(pkg_path, "spoon")
files_path <- list.files(files_path, full.names = TRUE)
yamls <- list()
yaml_items <- c(
"title", "description", "category", "classes", "parameters",
"parameters_description", "authors", "id"
)
for (file_path in files_path) {
yaml <- rmarkdown::yaml_front_matter(file_path)
yaml_formats <- names(yaml$formats)
yaml <- yaml[yaml_items]
yaml$formats <- yaml_formats
yaml$path <- file_path
yaml$name <- fs::path_ext_remove(basename(file_path))
yamls <- append(yamls, list(yaml))
}
yamls
# This script creates a tibble with the yamls information of the spoons.
yamls <- tibble::tibble(
id          = character(),
spoon       = character(),
title       = character(),
desc        = character(),
category    = character(),
classes     = list(),
params      = list(),
params_desc = list(),
authors     = list(),
formats     = list()
)
pkg_path <- fs::path_package("dessert")
files_path <- fs::path(pkg_path, "spoon")
files_path <- list.files(files_path, full.names = TRUE)
?fs::path_package
pkg_path
pkg_path <- fs::path_package("dessert")
# This script creates a tibble with the yamls information of the spoons.
yamls <- tibble::tibble(
id          = character(),
spoon       = character(),
title       = character(),
desc        = character(),
category    = character(),
classes     = list(),
params      = list(),
params_desc = list(),
authors     = list(),
formats     = list()
)
pkg_path <- fs::path_package("dessert")
files_path <- fs::path(pkg_path, "spoon")
files_path <- list.files(files_path, full.names = TRUE)
source("~/Desktop/dessert/R/yamls.R", echo=TRUE)
View(yamls)
yamls$classes
yamls$classes[[1]]
View(yamls[[7]][[1]])
yaml$format
names(yaml$format)
source("~/Desktop/dessert/R/yamls.R", echo=TRUE)
yamls <- tibble::tibble(
id          = character(),
spoon       = character(),
title       = character(),
desc        = character(),
category    = character(),
classes     = list(),
params      = list(),
params_desc = list(),
authors     = list(),
formats     = list()
)
source("~/Desktop/dessert/R/yamls.R", echo=TRUE)
library(fs)
library(tibble)
library(rmarkdown)
yamls <- tibble::tibble(
id          = character(),
spoon       = character(),
title       = character(),
desc        = character(),
category    = character(),
classes     = list(),
params      = list(),
params_desc = list(),
authors     = list(),
formats     = list()
)
pkg_path <- fs::path_package("dessert")
files_path <- fs::path(pkg_path, "spoon")
files_path <- list.files(files_path, full.names = TRUE)
for (file_path in files_path) {
yaml <- rmarkdown::yaml_front_matter(file_path)
yamls <- tibble::add_row(
yamls,
id          = yaml$id,
spoon       = base::sub("\\.qmd$", "", basename(file_path)),
title       = yaml$title,
desc        = yaml$description,
category    = yaml$category,
classes     = list(yaml$classes),
params      = list(yaml$parameters),
params_desc = list(yaml$parameters_description),
authors     = list(yaml$authors),
formats     = names(yaml$format)
)
}
yaml$format
names(yaml$format)
source("~/Desktop/dessert/R/yamls.R", echo=TRUE)
View(yamls)
source("~/Desktop/dessert/R/yamls.R", echo=TRUE)
yamls$spoon == "linearity"
source("~/Desktop/dessert/R/yamls.R", echo=TRUE)
document()
document()
check()
library(dessert)
test <- preview_spoon("linearity")
quit_preview()
check()
check()
check()
ask_spoon("linearity")
ask_spoon("linearity")
yamls
library(dessert)
source("~/Desktop/dessert/tools/list_yamls.R", echo=TRUE)
library(dessert)
library(dessert)
check()
yaml <- yamls[yamls$spoon == spoon,]
print("abc")
cat(id: yamls$id)
cat("id:" yamls$id)
cat("id:", yamls$id)
yaml <- yamls[yamls$spoon == spoon,]
yaml <- yamls[yamls$spoon == "linearity",]
yaml$id
cat("id:", yaml$id)
yaml$title
yaml$spoon
yaml$desc
stringr::str_trunc(yaml$desc)
stringr::str_trunc(yaml$desc, 1)
stringr::str_trunc(yaml$desc, 10)
cat(stringr::str_trunc(yaml$desc, 10))
cat(stringr::str_trunc(yaml$desc, 30))
?stringr::str_trunc
cat(stringr::str_trunc(yaml$desc, 30, ellipsis = "\U00B7"))
cat(stringr::str_trunc(yaml$desc, 30, ellipsis = "\U2026"))
yamls$classes
yamls[1,]$classes
yamls[1,]$params
yamls[[1,]]$params
yamls[1,]$params
yamls[1,]$params_desc
yamls[1,]$authors
yamls[1,]$formats
yaml <- yamls[yamls$spoon == "linearity",]
library(dessert)
check()
library(dessert)
library(devtools)
ask_spoon("linearity")
yamls[yamls$spoon == "linearity",]
yaml <- ask_spoon("linearity")
yaml$spoon
library(dessert)
yaml$spoon
yaml$desc
yaml$classes
yaml[["classes"]]
yaml["classes"]
yaml["classes"]
test <- yaml["classes"]
View(test)
yaml$classes
paste(yaml$classes)
paste(yaml$classes, collapse = ",")
yaml$classes
yaml$classes[[1]]
yaml$classes
yaml["classes"]
yaml[["classes"]]
yaml[[1]]
yaml$classes[1]
yaml$classes[[1]]
unlist(yaml$classes)
paste(unlist(yaml$classes), collapse = ",")
paste(unlist(yaml$classes), collapse = ", ")
library(dessert)
ask_spoon("linearity")
yaml$params
names(unlist(yaml$params))
names(unlist(yaml$params))
library(dessert)
ask_spoon("linearity")
library(dessert)
ask_spoon("linearity")
source("~/Desktop/dessert/tools/list_yamls.R", echo=TRUE)
library(dessert)
ask_spoon("linearity")
yamls
yamls$para,s
yamls$params
yamls[yamls$spoon == "linearity"]$params
yamls$spoon == "linearity"
yamls[yamls$spoon == "linearity",]
yamls[yamls$spoon == "linearity",]$spoon
yamls[yamls$spoon == "linearity",]$params
names(yamls[yamls$spoon == "linearity",]$params[[1]])
ask_spoon("linearity")
library(dessert)
ask_spoon("linearity")
library(dessert)
ask_spoon("linearity")
library(dessert)
ask_spoon("linearity")
ask_spoon("linearity")
library(dessert)
library(dessert)
ask_spoon("linearity")
library(dessert)
ask_spoon("linearity")
