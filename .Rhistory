library(devtools)
library(dessert)
strsplit1()
load_all()
library(devtools)
load_all()
exists("strsplit1", where = globalenv(), inherits = FALSE)
?load_all()
check()
check()
check()
check
check()
library(devtools)
check()
check()
library(dessert)
document()
check()
library(dessert)
strsplit1("alfa,bravo,charlie,delta", split = ",")
use_testthat()
test()
use_package("stringr")
document()
document()
load_all()
build()
library(dessert)
?str_splÂ§
?str_split_one
check()
library(dessert)
check()
library(dessert)
library(dessert)
check()
check()
check()
devtools::dev_sitrep()
available::available("doofus")
install.packages("available")
available::available("dessert")
usethis::use_citation()
check()
#| include = FALSE
input <- list(
object = lm(Sepal.Length ~ ., data = iris),
params = list(
seed = 1,
a = "a",
b = NULL,
c = 123
)
)
plot(input$object, 1)
check()
check()
plot(input$object, 1)
#| include = FALSE
input <- list(
object = lm(Sepal.Length ~ ., data = iris),
params = list(
seed = 1,
a = "a",
b = NULL,
c = 123
)
)
#| include = FALSE
input <- list(
object = lm(Sepal.Length ~ ., data = iris),
params = list(
seed = 1,
a = "a",
b = NULL,
c = 123
)
)
rmarkdown::yaml_front_matter("/Users/e.p.swens/Desktop/dessert/inst/spoon/linearity.qmd")
?set.seed
?lm
use_package("fs")
library(devtools)
use_package("fs")
library(dessert)
get_yamls()
?str_split_one
library(dessert)
document()
check()
library(dessert)
get_yamls()
?get_yamls()
document()
document()
document()
library(dessert)
check()
get_yamls
get_yamls()
x <- get_yamls()
x
check()
library(dessert)
check()
